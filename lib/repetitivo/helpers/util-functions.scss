// Strip units from a number
// @param {Number} $number The number to strip
// @return {Number}
// @example
//   strip-units(4px) // 4
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// Returns base to the exponent power.
// @param {Number} $base The base number
// @param {Number} $exponents The exponent to which to raise base
// @return {Number}
// @example
//   pow(4, 4) // 256
//   pow(4, -4) // 0.00391
@function pow($base, $exponents) {
  $raised: 1;

  @for $i from 1 through abs($exponents) {
    $raised: if($exponents >= 0, $raised * $base, $raised / $base);
  }

  @return $raised;
}

// Returns base to the exponent power.
// @param {Number} $multiple The value up the scale
// @param {Number} $base-size The base to start from
// @param {Number} $ratio The scale to use
// @return {Number}
// @example
//   modular-scale(2, 16px, 1.414) // 32px
@function modular-scale($multiple, $base-size, $ratio) {
  @return round($base-size * pow($ratio, $multiple));
}

// Split `$string` into several parts using `$delimiter`.
// @param {String} $string string to split
// @param {String} $delimiter string to use as a delimiter to split `$string`
// @return {List}
// @example
//   str-split("hello goodbye", " "); // (hello goodbye)
@function str-split($string, $delimiter) {
  $result: ();
  $running: true;
  $remaining: $string;

  @while $running {
    $index: str-index($remaining, $delimiter);

    @if $index {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    } @else {
      $running: false;
    }
  }

  @return append($result, $remaining);
}

// Returns last item in list
// @param {List} $list to look in
// @return {Mixed}
// @example
//   last(hello goodbye) // goodbye
@function last($list) {
  @return nth($list, length($list));
}
