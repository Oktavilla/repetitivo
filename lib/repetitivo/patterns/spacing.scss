@import "../config/breakpoints";
@import "../config/spacing";

@import "../helpers/exports";

@include exports("spacing") {
  %spacing-gutter-padding-side {
    padding-left: map-get($spacing-gutters, default) / 2;
    padding-right: map-get($spacing-gutters, default) / 2;

    @each $breakpoint, $val in $breakpoints {
      @if map-has-key($spacing-gutters, $breakpoint) {
        @include respond-to($breakpoint) {
          padding-left: map-get($spacing-gutters, $breakpoint) / 2;
          padding-right: map-get($spacing-gutters, $breakpoint) / 2;
        }
      }
    }
  }

  @each $spacing-size in $spacing-sizes {
    $size: nth($spacing-size, 1);
    $size-map: nth($spacing-size, 2);

    %spacing-#{to-lower-case($size)} {
      margin: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-#{to-lower-case($size)}-negative {
      margin: map-get($size-map, default) * -1;

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin: map-get($size-map, $breakpoint) * -1;
          }
        }
      }
    }

    %spacing-left-#{to-lower-case($size)} {
      margin-left: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-left: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-right-#{to-lower-case($size)} {
      margin-right: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-right: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-top-#{to-lower-case($size)} {
      margin-top: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-top: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-bottom-#{to-lower-case($size)} {
      margin-bottom: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-bottom: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-left-#{to-lower-case($size)} {
      padding-left: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-left: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-right-#{to-lower-case($size)} {
      padding-right: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-right: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-top-#{to-lower-case($size)} {
      padding-top: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-top: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-bottom-#{to-lower-case($size)} {
      padding-bottom: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-bottom: map-get($size-map, $breakpoint);
          }
        }
      }
    }
  }
}
