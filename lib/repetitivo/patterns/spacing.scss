@import "../config/breakpoints";
@import "../config/spacing";

@import "../helpers/exports";
@import "../helpers/respond-to";

@mixin spacing-gutter-padding-side {
  padding-left: map-get($spacing-gutters, default) / 2;
  padding-right: map-get($spacing-gutters, default) / 2;

  @each $breakpoint, $val in $breakpoints {
    @if map-has-key($spacing-gutters, $breakpoint) {
      @include respond-to($breakpoint) {
        padding-left: map-get($spacing-gutters, $breakpoint) / 2;
        padding-right: map-get($spacing-gutters, $breakpoint) / 2;
      }
    }
  }
}

@mixin spacing-gutter-padding-top {
  padding-top: map-get($spacing-gutters, default) / 2;

  @each $breakpoint, $val in $breakpoints {
    @if map-has-key($spacing-gutters, $breakpoint) {
      @include respond-to($breakpoint) {
        padding-top: map-get($spacing-gutters, $breakpoint) / 2;
      }
    }
  }
}

@mixin spacing-gutter-padding-bottom {
  padding-bottom: map-get($spacing-gutters, default) / 2;

  @each $breakpoint, $val in $breakpoints {
    @if map-has-key($spacing-gutters, $breakpoint) {
      @include respond-to($breakpoint) {
        padding-bottom: map-get($spacing-gutters, $breakpoint) / 2;
      }
    }
  }
}

@mixin spacing-compensate-gutter-padding-side {
  margin-left: map-get($spacing-gutters, default) / -2;
  margin-right: map-get($spacing-gutters, default) / -2;

  @each $breakpoint, $val in $breakpoints {
    @if map-has-key($spacing-gutters, $breakpoint) {
      @include respond-to($breakpoint) {
        margin-left: map-get($spacing-gutters, $breakpoint) / -2;
        margin-right: map-get($spacing-gutters, $breakpoint) / -2;
      }
    }
  }
}

@include exports("spacing") {
  %spacing-gutter-padding-side {
    @include spacing-gutter-padding-side;
  }

  @each $spacing-size in $spacing-sizes {
    $size: nth($spacing-size, 1);
    $size-map: nth($spacing-size, 2);
    $size-name: to-lower-case($size);

    %spacing-#{$size-name} {
      margin: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-#{$size-name}-negative {
      margin: map-get($size-map, default) * -1;

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin: map-get($size-map, $breakpoint) * -1;
          }
        }
      }
    }

    %spacing-left-#{$size-name} {
      margin-left: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-left: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-right-#{$size-name} {
      margin-right: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-right: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-top-#{$size-name} {
      margin-top: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-top: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-bottom-#{$size-name} {
      margin-bottom: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            margin-bottom: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-left-#{$size-name} {
      padding-left: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-left: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-right-#{$size-name} {
      padding-right: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-right: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-top-#{$size-name} {
      padding-top: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-top: map-get($size-map, $breakpoint);
          }
        }
      }
    }

    %spacing-inner-bottom-#{$size-name} {
      padding-bottom: map-get($size-map, default);

      @each $breakpoint, $val in $breakpoints {
        @if map-has-key($size-map, $breakpoint) {
          @include respond-to($breakpoint) {
            padding-bottom: map-get($size-map, $breakpoint);
          }
        }
      }
    }
  }
}
